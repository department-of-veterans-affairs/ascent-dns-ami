#!/bin/bash
# This script is used to execute a BIND process to provide DNS services

set -e

readonly EC2_INSTANCE_METADATA_URL="http://169.254.169.254/latest/meta-data"
readonly EC2_INSTANCE_DYNAMIC_DATA_URL="http://169.254.169.254/latest/dynamic"

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly SCRIPT_NAME="$(basename "$0")"

function print_usage {
  echo
  echo "Usage: run-dns [OPTIONS]"
  echo
  echo "This script is used to configure and run the named service."
  echo
  echo "Options:"
  echo
  echo -e "  --dns-zone\t\tName of the dns zone. Required."
  echo -e "  --forward-dns-servers\t\tIP adresses of DNS servers to forward outside requests to. Required."
  echo -e "  --query-cidrs\t\tIP block that can query the DNS service. Required."
  echo -e "  --zone-update-cidrs\t\IP blocks that can issue zone updates. Defaults to only allow zone updates from localhost."
  echo -e "  --master-ip\t\tIP address of the master DNS server. Supplying this will setup this DNS server as a slave to the provided master IP."
}

#################################################################################################
# UTILITY FUNCTIONS
#################################################################################################

function log {
  local readonly level="$1"
  local readonly message="$2"
  local readonly timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  >&2 echo -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

function log_info {
  local readonly message="$1"
  log "INFO" "$message"
}

function log_warn {
  local readonly message="$1"
  log "WARN" "$message"
}

function log_error {
  local readonly message="$1"
  log "ERROR" "$message"
}


function assert_not_empty {
  local readonly arg_name="$1"
  local readonly arg_value="$2"

  if [[ -z "$arg_value" ]]; then
    log_error "The value for '$arg_name' cannot be empty"
    print_usage
    exit 1
  fi
}

function assert_is_installed {
  local readonly name="$1"

  if [[ ! $(command -v ${name}) ]]; then
    log_error "The binary '$name' is required by this script but is not installed or in the system's PATH."
    exit 1
  fi
}

function lookup_path_in_instance_dynamic_data {
  local readonly path="$1"
  curl --silent --show-error --location "$EC2_INSTANCE_DYNAMIC_DATA_URL/$path/"
}

function get_instance_region {
  lookup_path_in_instance_dynamic_data "instance-identity/document" | jq -r ".region"
}

function get_owner_of_path {
  local readonly path="$1"
  ls -ld "$path" | awk '{print $3}'
}

#################################################################################################
# CORE FUNCTIONS
#################################################################################################

function configure_named {
  local readonly zone="$1"
  local readonly forward_dns_server="$2"
  local readonly query_cidrs="$3"
  local readonly zone_update_cidrs="$4"
  local readonly master_ip="$5"

  #Default to slave
  local node_type="slave"
  local allow_update=""
  local master="masters { $master_ip; };"
  local serial=`date "+%m%d%H%M"`
  local filename="/var/named/dynamic/$zone.zone-$node_type"

  if [[ -z "$master_ip" ]]; then
    node_type="master"
    allow_update="allow-update { 127.0.0.1;$zone_update_cidrs };"
    master=""
    serial='$serial'
    filename="/var/named/dynamic/$zone.zone-$node_type.original"
  fi

  log_info "Configuring DNS Server"
  cat > '/etc/named.conf' <<EOF
options {
        listen-on port 53 { any; };
        listen-on-v6 port 53 { none; };
        directory       "/var/named";
        dump-file       "/var/named/data/cache_dump.db";
        statistics-file "/var/named/data/named_stats.txt";
        memstatistics-file "/var/named/data/named_mem_stats.txt";
        allow-query     { 127.0.0.1;$query_cidrs };
        also-notify { };

        recursion yes;

        dnssec-enable no;
        dnssec-validation no;
        dnssec-lookaside auto;

        /* Path to ISC DLV key */
        bindkeys-file "/etc/named.iscdlv.key";

        managed-keys-directory "/var/named/dynamic";
};

logging {
        channel default_debug {
                file "data/named.run";
                severity dynamic;
        };
};

zone "." IN {
        type forward;
        forwarders { $forward_dns_servers };
        forward only;
};

zone "$zone" IN {
        type $node_type;
        file "/var/named/dynamic/$zone.zone-$node_type";
        $allow_update
        $master
};
EOF

cat > "$filename" <<EOF
\$TTL 86400
@   IN  SOA     ns1.$zone. root.$zone (
        $serial     ;Serial
        300         ;Refresh
        120         ;Retry
        604800      ;Expire
        300         ;Minimum TTL
)

; Specify our two nameservers
                IN      NS              ns1.$zone.
                IN      NS              ns2.$zone.

; Resolve nameserver hostnames to IP
ns1             IN      A               0.0.0.0
ns2             IN      A               0.0.0.0

; Define hostname -> IP pairs which you wish to resolve
@               IN      A               0.0.0.0
EOF

  #Execute our zone update script to generate C-name entries
  if [[ -z "$master_ip" ]]; then
    #copy updated zone config to dynamic folder so bind will pick it up
    cp "/var/named/dynamic/$zone.zone-master.original" "/var/named/dynamic/$zone.zone-master"
    sed -i -e 's/$serial/1/g' "/var/named/dynamic/$zone.zone-master"  
  fi

  #Restart named service
  sudo systemctl restart named.service

  #Execute our zone update script to generate C-name entries
  if [[ -z "$master_ip" ]]; then
    /opt/dns/zone-update $zone
  fi
}

# Setup cron job to update zone with C-name entries for our instances
function configure_zone_updates {
  local readonly zone="$1"

  #Schedule to run every hour
  echo "0 * * * * /opt/dns/zone-update $zone >> /root/update_bind_conf.log" >> /var/spool/cron/root
}

function update_dhcp {
  #update dhcp address and restart network
  echo "supersede domain-name-servers 127.0.0.1;" | sudo tee -a /etc/dhcp/dhclient.conf
  sudo /etc/init.d/network restart
}

function run {
  local zone=""
  local forward_dns_servers=""
  local query_cidrs=""
  local zone_update_cidrs=""
  local master_ip=""
  local all_args=()

  while [[ $# > 0 ]]; do
    local key="$1"

    case "$key" in
      --dns-zone)
        assert_not_empty "$key" "$2"
        zone="$2"
        shift
        ;;
      --forward-dns-servers)
        assert_not_empty "$key" "$2"
        forward_dns_servers="$2"
        shift
        ;;
      --query-cidrs)
        assert_not_empty "$key" "$2"
        query_cidrs="$2"
        shift
        ;;
      --zone-update-cidrs)
        zone_update_cidrs="$2"
        shift
        ;;
      --master-ip)
        master_ip="$2"
        shift
        ;;
      --help)
        print_usage
        exit
        ;;
      *)
        log_error "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  if [[ -z "$zone" ]]; then
    log_error "--dns-zone parameter must be set."
    exit 1
  fi
  if [[ -z "$forward_dns_servers" ]]; then
    log_error "--forward-dns-servers parameter must be set."
    exit 1
  fi
  if [[ -z "$query_cidrs" ]]; then
    log_error "--query-cidrs parameter must be set."
    exit 1
  fi

  assert_is_installed "aws"
  assert_is_installed "curl"
  assert_is_installed "jq"

  update_dhcp

  if [[ -z "$master_ip" ]]; then
    configure_zone_updates "$zone"
  fi
  configure_named "$zone" "$forward_dns_servers" "$query_cidrs" "$zone_update_cidrs" "$master_ip"
  
  
}

run "$@"